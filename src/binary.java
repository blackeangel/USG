import java.util.Objects;

public class binary extends Generator {
	
    public static void bynar() {
		Functions.writefile(ERRORLOG, "# binar -->");
        String f;
        if (Objects.equals(LANGUAGE, "русский")) {
            instance.toolbarLabel.setText("Создаю update-binary...");
        } else {
            instance.toolbarLabel.setText("Creating update-binary...");
        }
        if (instance.aromaInstallerCheckBox.isSelected()) {
            f = dirScript + System.getProperty("file.separator") + "update-binary-installer";
        }else{
            f = dirScript + System.getProperty("file.separator") + "update-binary";
        }
        Functions.writefile(f, "#!/sbin/sh");
        Functions.writefile(f, "export UPD_ZIP=\"$3\"");
        Functions.writefile(f, "export UPD_INTERFACE=\"/proc/$$/fd/$2\"");
        Functions.writefile(f, "export RECOVERY_SCRIPT_FD=$2");
        Functions.writefile(f, "export UPD_TEMP_FOLDER=/tmp");
        Functions.writefile(f, "export ZIP_TEMP_FOLDER=/zip_tmp");
        Functions.writefile(f, "set -o pipefail");
        Functions.writefile(f, "progress() {");
        Functions.writefile(f, "if [ $# != 2 ]");
        Functions.writefile(f, "then echo \"$0 expects 2 args, got $#\";");
        Functions.writefile(f, "  echo \"usage: $0 <fraction> <duration>\";");
        Functions.writefile(f, "else");
        Functions.writefile(f, " if [ $UPD_INTERFACE != \" \" ];then");
        Functions.writefile(f, " echo \"progress ${1} ${2} \" 1>&$UPD_INTERFACE;");
        Functions.writefile(f, " fi;");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "}");
        Functions.writefile(f, "show_progress() {");
        Functions.writefile(f, "progress $@");
        Functions.writefile(f, "}");
        Functions.writefile(f, "set_progress() {");
        Functions.writefile(f, "if [ $# != 1 ]");
        Functions.writefile(f, "then echo \"$0 expects 1 args, got $#\";");
        Functions.writefile(f, "  echo \"usage: $0 <fraction>\";");
        Functions.writefile(f, "else");
        Functions.writefile(f, " if [ $UPD_INTERFACE != \" \" ]; then");
        Functions.writefile(f, " echo \" set_progress ${1} \" 1>&$UPD_INTERFACE;");
        Functions.writefile(f, " fi;");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "}");
        Functions.writefile(f, "ui_print() {");
        Functions.writefile(f, "if [ $UPD_INTERFACE != \" \" ]; then");
        Functions.writefile(f, "  echo \"ui_print $* \" 1>&$UPD_INTERFACE;");
        Functions.writefile(f, "  echo \"ui_print \" 1>&$UPD_INTERFACE;");
        Functions.writefile(f, "else");
        Functions.writefile(f, "  echo \"$*\";");
        Functions.writefile(f, "fi;");
        Functions.writefile(f, "}");
        Functions.writefile(f, "package_extract_file(){");
        Functions.writefile(f, "if [ $# != 2 ] ");
        Functions.writefile(f, " then echo \"$0 expects 2 args, got $#\";");
        Functions.writefile(f, "  echo \"usage: $0 <src-file> <dst-file>\";");
        Functions.writefile(f, "else unzip -p $UPD_ZIP $1 > $2;");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "}");
        Functions.writefile(f, "package_extract_folder(){");
        Functions.writefile(f, "if [ -d $UPD_ZIP_TEMP_FOLDER ] ");
        Functions.writefile(f, " then rm -rf $UPD_ZIP_TEMP_FOLDER");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "");
        Functions.writefile(f, "if [ $# != 2 ] ");
        Functions.writefile(f, " then echo \"$0 expects 2 args, got $#\"; echo \"usage: $0 <src-dir> <dst-dir>\";");
        Functions.writefile(f, "else mkdir -p ZIP_TEMP_FOLDER");
        Functions.writefile(f, "  unzip $UPD_ZIP $1/* -d $UPD_ZIP_TEMP_FOLDER;");
        Functions.writefile(f, "  mv $UPD_ZIP_TEMP_FOLDER/$1 $2");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "}");
        Functions.writefile(f, "set_perm() {");
        Functions.writefile(f, "if [ $# != 2 ] ");
        Functions.writefile(f, " then echo \" $0 expects 4 args, got $#\";");
        Functions.writefile(f, "  echo \"usage: $0 <uid> <gid> <mode> <pathtofile>[, ... pathtofileN]\" ;");
        Functions.writefile(f, "else");
        Functions.writefile(f, " us=$(id -u $1)");
        Functions.writefile(f, " gr=$(id -g $2)");
        Functions.writefile(f, " mode=$3");
        Functions.writefile(f, " shift 3");
        Functions.writefile(f, " for item in \"$*\"; do");
        Functions.writefile(f, "     chown ${us}.${gr} $item");
        Functions.writefile(f, "     chown ${us}:${gr} $item");
        Functions.writefile(f, "     chmod $mode $item");
        Functions.writefile(f, " done");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "}");
        Functions.writefile(f, "stdout_to_ui_print() {");
        Functions.writefile(f, "while read -r line; do");
        Functions.writefile(f, "ui_print \"$line\"");
        Functions.writefile(f, "done");
        Functions.writefile(f, "}");
        Functions.writefile(f, "to_ui_print() {");
        Functions.writefile(f, "eval \"$*\" | stdout_to_ui_print");
        Functions.writefile(f, "}");
        Functions.writefile(f, "getprop(){");
        Functions.writefile(f, "bp=/system/build.prop");
        Functions.writefile(f, "if [ -f \" $bp\"  ]; then");
        Functions.writefile(f, " grep \" $1\" $bp | sed 's/.*=//'");
        Functions.writefile(f, " else");
        Functions.writefile(f, " echo \"System not installed!\"");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "}");
        Functions.writefile(f, "setprop(){");
        Functions.writefile(f, "bp=/system/build.prop");
        Functions.writefile(f, "if [ -f \" $bp\" ]; then");
        Functions.writefile(f, "par=$(echo -n $1 | sed -r 's/=.+//')");
        Functions.writefile(f, "  if grep -q \"$par\" $bp; then");
        Functions.writefile(f, "      sed -i \"s/$par=.*/$1/g\" $bp");
        Functions.writefile(f, "  else");
        Functions.writefile(f, "      echo \"$1\" >> $bp");
        Functions.writefile(f, "  fi");
        Functions.writefile(f, "else");
        Functions.writefile(f, "	echo \"System not installed!\"");
        Functions.writefile(f, "	exit");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "}");
        Functions.writefile(f, "file_getprop(){");
        Functions.writefile(f, "if [ -f \"$1\" ]; then");
        Functions.writefile(f, "	grep \"$2\" \"$1\" | sed 's/.*=//'");
        Functions.writefile(f, "else");
        Functions.writefile(f, "	echo \"prop file not found\"");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "}");
        Functions.writefile(f, "set_perm_recursive() {");
		Functions.writefile(f, "  dirs=$(echo $* | awk '{ print substr($0, index($0,$5)) }');");
		Functions.writefile(f, "  for i in $dirs; do");
		Functions.writefile(f, "    chown -R $1.$2 $i; chown -R $1:$2 $i;");
		Functions.writefile(f, "    find \"$i\" -type d -exec chmod $3 {} +;");
		Functions.writefile(f, "    find \"$i\" -type f -exec chmod $4 {} +;");
		Functions.writefile(f, "  done;");
		Functions.writefile(f, "}");
        Functions.writefile(f, "is_mounted() {");
        Functions.writefile(f, "if [ ! -z \"$2\" ]; then");
        Functions.writefile(f, "  cat /proc/mounts | grep $1 | grep $2, >/dev/null");
        Functions.writefile(f, "else");
        Functions.writefile(f, "  cat /proc/mounts | grep $1 >/dev/null");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "return $?");
        Functions.writefile(f, "}");
        Functions.writefile(f, "wipe(){");
        Functions.writefile(f, "if [ $1 == dalvik ]; then");
        Functions.writefile(f, "if (! is_mounted /data rw); then mount -o rw,remount /data; fi");
        Functions.writefile(f, "if (! is_mounted /data rw); then mount -o rw,remount /data /data; fi");
        Functions.writefile(f, "rm -rf /data/dalvik-cache/*");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "if [ $1 == /data/ ]; then");
        Functions.writefile(f, "if (! is_mounted /data rw); then mount -o rw,remount /data; fi");
        Functions.writefile(f, "if (! is_mounted /data rw); then mount -o rw,remount /data /data; fi");
        Functions.writefile(f, "find data/* -! -regex 'data/media.*' -delete");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "if [ $1 == caches ]; then");
        Functions.writefile(f, "if (! is_mounted /data rw); then mount -o rw,remount /data; fi");
        Functions.writefile(f, "if (! is_mounted /data rw); then mount -o rw,remount /data /data; fi");
        Functions.writefile(f, "if (! is_mounted /cache rw); then mount -o rw,remount /cache; fi");
        Functions.writefile(f, "if (! is_mounted /cache rw); then mount -o rw,remount /cache /cache; fi");
        Functions.writefile(f, " rm -rf /data/dalvik-cache/*");
        Functions.writefile(f, " rm -rf /cache/*");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "if [ $1 == /system ]; then");
        Functions.writefile(f, "if (! is_mounted /system rw); then mount -o rw,remount /system; fi");
        Functions.writefile(f, "if (! is_mounted /system rw); then mount -o rw,remount /system /system; fi");
        Functions.writefile(f, "rm -rf /system/*");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "if [ $1 == /cache ]; then");
        Functions.writefile(f, "if (! is_mounted /cache rw); then mount -o rw,remount /cache; fi");
        Functions.writefile(f, "if (! is_mounted /cache rw); then mount -o rw,remount /cache /cache; fi");
        Functions.writefile(f, " rm -rf /cache/*");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "if [ $1 == \"userdata\" ]; then");
        Functions.writefile(f, "if (! is_mounted /data rw); then mount -o rw,remount /data; fi");
        Functions.writefile(f, "if (! is_mounted /data rw); then mount -o rw,remount /data /data; fi");
        Functions.writefile(f, "rm -rf /data/*");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "}");
        Functions.writefile(f, "remount_system_rw() {");
        Functions.writefile(f, "if (! is_mounted /system rw); then mount -o rw,remount /system; fi");
        Functions.writefile(f, "if (! is_mounted /system rw); then mount -o rw,remount /system /system; fi");
        Functions.writefile(f, "}");
        Functions.writefile(f, "install_boot() {");
        Functions.writefile(f, "if [ -z \" $BOOTIMAGE\" ]; then");
        Functions.writefile(f, " for PARTITION in kern-a KERN-A android_boot ANDROID_BOOT kernel KERNEL boot BOOT lnx LNX; do");
        Functions.writefile(f, "    BOOTIMAGE=$(readlink /dev/block/by-name/$PARTITION || readlink /dev/block/platform/*/by-name/$PARTITION || readlink /dev/block/platform/*/*/by-name/$PARTITION)");
        Functions.writefile(f, "    if [ ! -z \"$BOOTIMAGE\" ]; then break; fi");
        Functions.writefile(f, " done");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "unzip -o \"$UPD_ZIP\" boot.img -d \" /tmp/\"");
        Functions.writefile(f, "dd if=/tmp/boot.img of=$BOOTIMAGE");
        Functions.writefile(f, "rm /tmp/boot.img");
        Functions.writefile(f, "}");
        Functions.writefile(f, "symlink(){");
        Functions.writefile(f, "	ln -s $1 $2");
        Functions.writefile(f, "}");
        Functions.writefile(f, "delete(){");
        Functions.writefile(f, "	rm -f $1");
        Functions.writefile(f, "}");
        Functions.writefile(f, "delete_reursive(){");
        Functions.writefile(f, "	rm -rf $1");
        Functions.writefile(f, "}");
        Functions.writefile(f, "ui_print;");
        Functions.writefile(f, "if [ \"$UPD_ZIP\" == \" /tmp/update.zip\" / ]; then");
        Functions.writefile(f, "	ui_print \"Can not run in sideload mode\"");
        Functions.writefile(f, "	exit 1");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "if [ -d $UPD_TEMP_FOLDER ]");
        Functions.writefile(f, "	then rm -rf $UPD_TEMP_FOLDER");
        Functions.writefile(f, "fi");
        Functions.writefile(f, "mkdir -p $UPD_TEMP_FOLDER");
        Functions.writefile(f, "package_extract_file META-INF/com/google/android/updater-script $UPD_TEMP_FOLDER/updater-script || ui_print \"Can not extract updater-script. Do you have it in package?\"");
        Functions.writefile(f, "chmod 777 $UPD_TEMP_FOLDER/updater-script");
        Functions.writefile(f, ". $UPD_TEMP_FOLDER/updater-script $@");
        Functions.writefile(f, "exit $?");
        Functions.writefile(ERRORLOG, "# <-- binar");
    }
}